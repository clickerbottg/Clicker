import sqlite3
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

TOKEN = "7880046385:AAHq25wmdy2bXy_BMVGe_pY1YYsksMlbjUw"  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Å–≤—ñ–π —Ç–æ–∫–µ–Ω
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
conn = sqlite3.connect("clicker.db")
cursor = conn.cursor()

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ, —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ —ñ—Å–Ω—É—î
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    dc INTEGER DEFAULT 0,
    upgrade_level INTEGER DEFAULT 1
)
""")
conn.commit()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def get_user(user_id):
    cursor.execute("SELECT dc, upgrade_level FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    if not user:
        cursor.execute("INSERT INTO users (user_id) VALUES (?)", (user_id,))
        conn.commit()
        return (0, 1)  # –ü–æ—á–∞—Ç–∫–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
    return user

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É DC
def update_dc(user_id, amount):
    dc, level = get_user(user_id)
    new_dc = dc + amount
    cursor.execute("UPDATE users SET dc = ? WHERE user_id = ?", (new_dc, user_id))
    conn.commit()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è –ø–æ–∫—Ä–∞—â–µ–Ω—å
def upgrade_user(user_id):
    dc, level = get_user(user_id)
    cost = level * 10  # –í–∞—Ä—Ç—ñ—Å—Ç—å –∞–ø–≥—Ä–µ–π–¥—É

    if dc >= cost:
        cursor.execute("UPDATE users SET dc = ?, upgrade_level = ? WHERE user_id = ?", (dc - cost, level + 1, user_id))
        conn.commit()
        return True, level + 1, cost
    return False, level, cost

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø—É –≥—Ä–∞–≤—Ü—ñ–≤
def get_leaderboard():
    cursor.execute("SELECT user_id, dc FROM users ORDER BY dc DESC LIMIT 10")
    return cursor.fetchall()

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–Ω–æ–ø–æ–∫
def get_main_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üí∞ –ö–ª—ñ–∫", callback_data="click"))
    keyboard.add(InlineKeyboardButton("‚ö° –ü—Ä–æ–∫–∞—á–∞—Ç–∏", callback_data="upgrade"))
    keyboard.add(InlineKeyboardButton("üèÜ –õ—ñ–¥–µ—Ä–±–æ—Ä–¥", callback_data="top"))
    return keyboard

# –°—Ç–∞—Ä—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    user_id = message.from_user.id
    get_user(user_id)  # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤ –ë–î
    await message.answer(
    "üéÆ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –≤ DC-–∫–ª—ñ–∫–µ—Ä!\n\n"
    "–ù–∞—Ç–∏—Å–∫–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ:",
    reply_markup=get_main_keyboard()
)


# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(lambda call: call.data in ["click", "upgrade", "top"])
async def handle_click(call: types.CallbackQuery):
    user_id = call.from_user.id

    if call.data == "click":
        _, level = get_user(user_id)
        update_dc(user_id, level)
        await call.message.edit_text(
    f"üí∞ –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ {level} DC!\n"
    f"üîù –í–∞—à –±–∞–ª–∞–Ω—Å: {get_user(user_id)[0]} DC",
    reply_markup=get_main_keyboard()
)


    elif call.data == "upgrade":
        success, new_level, cost = upgrade_user(user_id)
        if success:
            text = (
    f"‚úÖ –í–∏ –ø–æ–∫—Ä–∞—â–∏–ª–∏ —Ä—ñ–≤–µ–Ω—å –¥–æ {new_level}!\n"
    f"üí∞ –ù–æ–≤–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ –∑–∞ –∫–ª—ñ–∫: {new_level} DC"
)

        else:
            text = (
    f"‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ DC!\n"
    f"üí∏ –í–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è: {cost} DC"
)

        await call.message.edit_text(text, reply_markup=get_main_keyboard())

    elif call.data == "top":
        top_users = get_leaderboard()
        if not top_users:
            text = "üòî –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –≥—Ä–∞–≤—Ü—ñ–≤ —É —Ç–æ–ø—ñ!"
        else:
            text = "üèÜ *–¢–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤ DC:* üèÜ\n"
            for idx, (user_id, dc) in enumerate(top_users, start=1):
                text += f"{idx}. [User {user_id}](tg://user?id={user_id}) ‚Äì {dc} DC\n"
        await call.message.edit_text(text, parse_mode="Markdown", reply_markup=get_main_keyboard())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
